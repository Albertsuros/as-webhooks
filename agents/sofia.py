import os
from dotenv import load_dotenv
from openai import OpenAI
import requests
import re
import sys
import json
import matplotlib.pyplot as plt
import gc
import time
from email_photo_processor import buscar_fotos_cliente_email, marcar_fotos_como_procesadas
from datetime import datetime, timedelta

# IMPORTACIONES para generar cartas astrales
from carta_natal import CartaAstralNatal
from progresiones import generar_progresiones_personalizada as generar_progresiones
from transitos import generar_transitos_personalizada as generar_transitos

# IMPORTACIONES para revoluci√≥n solar
from revolucion_sola import generar_revolucion_solar_sola_personalizada as generar_revolucion_sola
from revolucion_natal import generar_revolucion_solar_personalizada as generar_revolucion_natal

# IMPORTACIONES para astrolog√≠a horaria y sinastr√≠a
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from astrol_horaria import main as generar_astrologia_horaria
from sinastria import main as generar_sinastria

# IMPORTAR SISTEMA DE SEGUIMIENTO (que ya tienes funcionando)
from sistema_seguimiento import SeguimientoTelefonico, obtener_numero_telefono_desde_vapi

# IMPORTACIONES para email
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
sessions = {}

# Inicializar sistema de seguimiento
seguimiento = SeguimientoTelefonico()

# DURACIONES DE SESI√ìN POR SERVICIO (en minutos)
DURACIONES_SERVICIO = {
    'carta_astral_ia': 40,
    'revolucion_solar_ia': 50,
    'sinastria_ia': 30,
    'astrologia_horaria_ia': 15,
    'psico_coaching_ia': 45,
    'lectura_manos_ia': 30,
    'lectura_facial_ia': 15,
    'astrologo_humano': 60,
    'tarot_humano': 60,
    # EXTENSIONES ¬Ω TIEMPO
    'carta_astral_ia_half': 20,
    'revolucion_solar_ia_half': 25,
    'sinastria_ia_half': 15,
    'lectura_manos_ia_half': 15,
    'psico_coaching_ia_half': 20,
    'grafologia_ia': 30
}

def verificar_sesion_activa(telefono):
    """Verificar si hay sesi√≥n cortada recientemente (√∫ltimos 5 minutos)"""
    try:
        if not telefono:
            return None
            
        # Buscar sesi√≥n activa o reci√©n cortada
        sesion = seguimiento.buscar_sesion_activa(telefono)
        
        if sesion:
            # Verificar si la sesi√≥n se cort√≥ hace menos de 5 minutos
            from datetime import datetime, timedelta
            ahora = datetime.now()
            fecha_exp = datetime.fromisoformat(sesion['fecha_expiracion'])
            
            # Si a√∫n est√° en el per√≠odo de reconexi√≥n O se cort√≥ hace menos de 5 minutos
            if ahora < fecha_exp:
                # Sesi√≥n a√∫n v√°lida para reconexi√≥n
                return sesion
            elif (ahora - fecha_exp).total_seconds() < 300:
                # Se cort√≥ hace menos de 5 minutos - permitir reconexi√≥n
                print(f"üö® Detectada llamada cortada hace {int((ahora - fecha_exp).total_seconds())} segundos")
                enviar_notificacion_llamada_cortada(telefono, sesion)
                return sesion
                
        return None
        
    except Exception as e:
        print(f"‚ùå Error verificando sesi√≥n activa: {e}")
        return None

def manejar_reconexion(sesion_activa, data):
    """Manejar reconexi√≥n despu√©s de llamada cortada"""
    try:
        tiempo_restante = datetime.fromisoformat(sesion_activa['fecha_expiracion']) - datetime.now()
        horas_restantes = max(0, int(tiempo_restante.total_seconds() / 3600))
        
        # Mensaje de reconexi√≥n
        mensaje_reconexion = f"¬°Hola de nuevo! Continuamos tu {sesion_activa['tipo_servicio']}. Te quedan {horas_restantes} horas para seguir nuestra conversaci√≥n."
        
        # Actualizar que se reconect√≥
        seguimiento.actualizar_conversacion(sesion_activa['id'], {
            'tipo': 'reconexion_automatica',
            'mensaje': 'Cliente se reconect√≥ despu√©s de corte'
        })
        
        # Transferir directo al especialista
        especialistas = {
            'carta_astral_ia': 'asst_78f4bfbd-cf67-46cb-910d-c8f0f8adf3fc',
            'revolucion_solar_ia': 'asst_9513ec30-f231-4171-959c-26c8588d248e', 
            'sinastria_ia': 'asst_9960b33c-db72-4ebd-ae3e-69ce6f7e6660',
            'astrologia_horaria_ia': 'asst_d218cde4-d4e1-4943-8fd9-a1df9404ebd6',
            'psico_coaching_ia': 'asst_63a0f9b9-c5d5-4df6-ba6f-52d700b51275',
            'lectura_manos_ia': 'asst_8473d3ab-22a7-479c-ae34-427e992023de',
            'lectura_facial_ia': 'asst_9cae2faa-2a8e-498b-b8f4-ab7af65bf734',
            'grafologia_ia': 'asst_84c67029-8059-4066-a5ae-8532b99fd24c'
        }
        
        especialista = especialistas.get(sesion_activa['tipo_servicio'])
        
        if especialista:
            return {
                "type": "transfer_call",
                "transfer": {"type": "assistant", "assistantId": especialista},
                "data_extra": {
                    "sesion_activa": sesion_activa,
                    "reconexion_automatica": True
                },
                "speak_first": mensaje_reconexion
            }
        else:
            return {"type": "speak", "text": mensaje_reconexion}
            
    except Exception as e:
        print(f"‚ùå Error manejando reconexi√≥n: {e}")
        return {"type": "speak", "text": "¬°Hola de nuevo! ¬øEn qu√© puedo ayudarte?"}

def enviar_notificacion_llamada_cortada(numero_telefono, sesion_data=None):
    """Enviar email de notificaci√≥n cuando se corta una llamada"""
    try:
        # Email del administrador
        email_admin = os.getenv("EMAIL_ADMIN", "albertsg@yahoo.es")
        
        # Preparar datos
        telefono = numero_telefono or "N√∫mero no disponible"
        servicio = sesion_data.get('tipo_servicio', 'No especificado') if sesion_data else 'No especificado'
        cliente_email = sesion_data.get('email', 'No proporcionado') if sesion_data else 'No proporcionado'
        nombre = sesion_data.get('datos_natales', {}).get('nombre', 'No proporcionado') if sesion_data else 'No proporcionado'
        
        # Crear mensaje
        asunto = f"üö® Llamada cortada - {servicio}"
        cuerpo = f"""
ALERTA: Se ha cortado una llamada

üìû TEL√âFONO: {telefono}
üë§ CLIENTE: {nombre}
üìß EMAIL: {cliente_email}
üîÆ SERVICIO: {servicio}
‚è∞ FECHA/HORA: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}

---
Sistema de notificaciones autom√°tico
        """
        
        # Enviar email
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        email_sender = os.getenv("EMAIL_SENDER")
        email_password = os.getenv("EMAIL_PASSWORD")
        
        if email_sender and email_password:
            msg = MIMEMultipart()
            msg['From'] = email_sender
            msg['To'] = email_admin
            msg['Subject'] = asunto
            msg.attach(MIMEText(cuerpo, 'plain', 'utf-8'))
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_sender, email_password)
            server.sendmail(email_sender, email_admin, msg.as_string())
            server.quit()
            
            print(f"‚úÖ Email de notificaci√≥n enviado para llamada cortada: {telefono}")
            return True
        else:
            print("‚ùå Credenciales de email no configuradas")
            return False
            
    except Exception as e:
        print(f"‚ùå Error enviando notificaci√≥n de llamada cortada: {e}")
        return False

def obtener_horarios_disponibles_sofia(tipo_servicio, fecha_solicitada=None):
    """Obtener horarios disponibles usando l√≥gica inteligente"""
    try:
        from logica_citas_inteligente import obtener_horarios_disponibles_inteligentes
        
        if not fecha_solicitada:
            from datetime import datetime, timedelta
            fecha_solicitada = datetime.now() + timedelta(days=1)
        
        horarios, fecha_final = obtener_horarios_disponibles_inteligentes(tipo_servicio, fecha_solicitada)
        return horarios
        
    except Exception as e:
        print(f"‚ùå Error en horarios Sofia: {e}")
        return []

def verificar_horario_disponible_sofia(tipo_servicio, fecha, horario):
    """Verificar si un horario espec√≠fico est√° disponible desde Sofia"""
    try:
        import sqlite3
        conn = sqlite3.connect("calendario_citas.db")
        cur = conn.cursor()
        
        # Verificar en la nueva estructura de BD
        cur.execute("""
        SELECT COUNT(*) 
        FROM citas_agendadas ca
        JOIN clientes_servicios cs ON ca.cliente_servicio_id = cs.id
        WHERE cs.tipo_servicio = ? AND ca.fecha_cita = ? AND ca.horario = ? AND ca.estado_cita != 'cancelada'
        """, (tipo_servicio, fecha.strftime('%Y-%m-%d'), horario))
        
        count = cur.fetchone()[0]
        conn.close()
        
        return count == 0  # True si est√° libre, False si est√° ocupado
        
    except Exception as e:
        print(f"‚ùå Error verificando disponibilidad desde Sofia: {e}")
        return True  # En caso de error, asumir que est√° libre

def agendar_cita_humana_sofia(datos_cliente, tipo_servicio, horario_elegido, fecha_elegida, codigo_servicio):
    """Agendar cita para astr√≥logo o tarot humano desde Sofia CON BD COMPLETA"""
    try:
        # IMPORTAR FUNCIONES DESDE MAIN.PY
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        
        nombre = datos_cliente.get('nombre', 'Cliente')
        email = datos_cliente.get('email', '')
        telefono = datos_cliente.get('telefono', '')
        
        # 1. REGISTRAR CLIENTE EN TABLA PRINCIPAL (como todos los servicios)
        try:
            from main import registrar_cliente_servicio, agendar_cita_especifica
            
            cliente_id = registrar_cliente_servicio(
                codigo_servicio=codigo_servicio,
                tipo_servicio=tipo_servicio,
                cliente_datos=datos_cliente,
                numero_telefono=telefono,
                especialista="Pendiente asignaci√≥n"
            )
            
            if not cliente_id:
                return False, {"error": "Error registrando cliente"}
            
            # 2. AGENDAR CITA ESPEC√çFICA (adicional para servicios humanos)
            exito, codigo_reserva = agendar_cita_especifica(cliente_id, fecha_elegida, horario_elegido, tipo_servicio)
            
            if not exito:
                return False, {"error": codigo_reserva}
                
        except ImportError:
            # Fallback si no se pueden importar las funciones de main.py
            return False, {"error": "Error del sistema - funciones no disponibles"}
        
        servicio_nombre = {
            'astrologo_humano': 'Astr√≥logo Personal (1 hora)',
            'tarot_humano': 'Tarot Personal (1 hora)'
        }.get(tipo_servicio, 'Consulta Personal')
        
        confirmacion = {
            'tipo': 'cita_agendada',
            'servicio': servicio_nombre,
            'cliente': nombre,
            'email': email,
            'telefono': telefono,
            'fecha': fecha_elegida.strftime("%d/%m/%Y"),
            'horario': horario_elegido,
            'codigo_reserva': codigo_reserva,
            'fecha_agendamiento': datetime.now().strftime("%d/%m/%Y %H:%M")
        }
        
        print(f"‚úÖ Cliente + Cita registrados desde Sofia: {servicio_nombre} - {fecha_elegida.strftime('%d/%m/%Y')} {horario_elegido}")
        return True, confirmacion
        
    except Exception as e:
        print(f"‚ùå Error agendando cita desde Sofia: {e}")
        return False, {"error": str(e)}

def enviar_email_instrucciones_fotos(email_cliente, nombre_cliente, tipo_servicio):
    """Enviar email con instrucciones para subir fotos"""
    try:
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        email_sender = os.getenv("EMAIL_SENDER")
        email_password = os.getenv("EMAIL_PASSWORD")
        
        if tipo_servicio == 'lectura_manos_ia':
            asunto = "üì∏ Instrucciones para tu lectura de manos"
            cuerpo = f"""
Hola {nombre_cliente},

Para tu sesi√≥n de lectura de manos, necesitamos las fotos de tus palmas.

üìß RESPONDE ESTE EMAIL con:
üì∏ Foto de tu mano izquierda (palma abierta, bien iluminada)
üì∏ Foto de tu mano derecha (palma abierta, bien iluminada)
‚úã Indica si eres diestro o zurdo

Una vez enviadas las fotos, llama al mismo n√∫mero con el mismo tel√©fono para continuar tu sesi√≥n.

¬°Gracias!
Equipo Sof√≠a

---
IMPORTANTE: Las fotos deben ser claras y con buena iluminaci√≥n para una lectura precisa.
            """
        elif tipo_servicio == 'lectura_facial_ia':
            asunto = "üì∏ Instrucciones para tu lectura facial"
            cuerpo = f"""
Hola {nombre_cliente},

Para tu sesi√≥n de lectura facial, necesitamos 3 fotos espec√≠ficas.

üìß RESPONDE ESTE EMAIL con:
üì∏ Foto frontal de tu cara (mirando de frente)
üì∏ Foto diagonal derecha (tu cara girada 45¬∞ a la derecha)
üì∏ Foto diagonal izquierda (tu cara girada 45¬∞ a la izquierda)

Una vez enviadas las fotos, llama al mismo n√∫mero con el mismo tel√©fono para continuar tu sesi√≥n.

¬°Gracias!
Equipo Sof√≠a

---
IMPORTANTE: Las fotos deben ser claras, con buena iluminaci√≥n y sin filtros.
            """
        elif tipo_servicio == 'grafologia_ia':
            asunto = "üìù Instrucciones para tu an√°lisis grafol√≥gico"
            cuerpo = f"""
Hola {nombre_cliente},

Para tu an√°lisis grafol√≥gico, necesitamos una muestra de tu escritura.

üìß RESPONDE ESTE EMAIL con:
üìù Escribe a mano un texto de al menos 5 l√≠neas (cuantas mas l√≠neas mejor) sobre ti mismo
üì∏ Foto clara de la escritura (buena iluminaci√≥n, letra legible)
‚úçÔ∏è Indica si eres diestro o zurdo

TEXTO SUGERIDO: "Me llamo [tu nombre], tengo [edad] a√±os. Me gusta... Mi trabajo es... En mi tiempo libre... Lo que m√°s me emociona es... Mi mayor sue√±o es..."

Una vez enviada la muestra, llama al mismo n√∫mero para continuar tu sesi√≥n.

¬°Gracias!
Equipo Sof√≠a

---
IMPORTANTE: La escritura debe ser natural, en papel blanco y con bol√≠grafo azul o negro.
    """
        
        # Crear mensaje
        msg = MIMEMultipart()
        msg['From'] = email_sender
        msg['To'] = email_cliente
        msg['Subject'] = asunto
        msg.attach(MIMEText(cuerpo, 'plain', 'utf-8'))
        
        # Enviar email
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(email_sender, email_password)
        text = msg.as_string()
        server.sendmail(email_sender, email_cliente, text)
        server.quit()
        
        print(f"‚úÖ Email de instrucciones enviado a {email_cliente}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error enviando email: {e}")
        return False

def validar_codigo_servicio(codigo):
    """Validar c√≥digo de servicio con reconocimiento flexible"""
    if not codigo:
        return False, None
    
    # Limpiar y normalizar el c√≥digo
    codigo_original = codigo
    codigo = codigo.upper().strip()
    
    # REMOVER PALABRAS COMUNES DEL RECONOCIMIENTO DE VOZ
    palabras_ignorar = [
        'GUION', 'GUI√ìN', 'DASH', 'UNDERSCORE', 'BAJO', 
        'MENOS', 'RAYA', 'BARRA', 'SPACE', 'ESPACIO'
    ]
    
    for palabra in palabras_ignorar:
        codigo = codigo.replace(palabra, '')
    
    # REMOVER ESPACIOS Y CARACTERES ESPECIALES
    codigo = codigo.replace(' ', '').replace('-', '').replace('_', '')
    
    print(f"üîç DEBUG: '{codigo_original}' ‚Üí '{codigo}'")
    
    # PATTERNS FLEXIBLES (sin gui√≥n bajo, solo letras+n√∫meros)
    import re
    
    # Patrones de 8-9 caracteres: AI123456 o AIM123456
    patterns = [
        r'^(AI|RS|SI|AH|PC|LM|LF|GR)(\d{6})$',        # AI123456
        r'^(AIM|RSM|SIM|LMM|PCM)(\d{6})$',             # AIM123456  
        r'^(AS|TH)(\d{6})$'                            # AS123456, TH123456
    ]
    
    for pattern in patterns:
        match = re.match(pattern, codigo)
        if match:
            prefijo = match.group(1)
            numeros = match.group(2)
            
            # RECONSTRUIR C√ìDIGO EN FORMATO CORRECTO
            if prefijo in ['AIM', 'RSM', 'SIM', 'LMM', 'PCM']:
                codigo_final = f"{prefijo}{numeros}"  # Sin gui√≥n para extensiones
            else:
                codigo_final = f"{prefijo}_{numeros}"  # Con gui√≥n para normales
            
            # MAPEO A TIPOS DE SERVICIO
            tipos_servicio = {
                'AI_': 'carta_astral_ia',
                'RS_': 'revolucion_solar_ia', 
                'SI_': 'sinastria_ia',
                'AH_': 'astrologia_horaria_ia',
                'PC_': 'psico_coaching_ia',
                'LM_': 'lectura_manos_ia',
                'LF_': 'lectura_facial_ia',
                'GR_': 'grafologia_ia',
                'AS_': 'astrologo_humano',
                'TH_': 'tarot_humano',
                'AIM': 'carta_astral_ia_half',
                'RSM': 'revolucion_solar_ia_half',
                'SIM': 'sinastria_ia_half',
                'LMM': 'lectura_manos_ia_half',
                'PCM': 'psico_coaching_ia_half'
            }
            
            # Buscar tipo de servicio
            for prefijo_tipo, tipo in tipos_servicio.items():
                if codigo_final.startswith(prefijo_tipo):
                    print(f"‚úÖ C√ìDIGO RECONOCIDO: '{codigo_original}' ‚Üí '{codigo_final}' ‚Üí {tipo}")
                    return True, tipo
    
    print(f"‚ùå C√ìDIGO NO V√ÅLIDO: '{codigo_original}' ‚Üí '{codigo}'")
    return False, None

# TAMBI√âN A√ëADIR FUNCI√ìN DE DEBUG
def debug_reconocimiento_codigo(mensaje_usuario):
    """Debug para ver c√≥mo se reconoce el c√≥digo"""
    print(f"üé§ AUDIO RECONOCIDO: '{mensaje_usuario}'")
    
    # Intentar extraer posibles c√≥digos
    import re
    
    # Buscar patrones de c√≥digo en el mensaje
    posibles_codigos = re.findall(r'\b[A-Z]{2,3}[_\s\-]*\d{6}\b', mensaje_usuario.upper())
    
    for posible in posibles_codigos:
        valido, tipo = validar_codigo_servicio(posible)
        print(f"   üîç Encontrado: '{posible}' ‚Üí V√°lido: {valido} ‚Üí Tipo: {tipo}")
    
    return posibles_codigos

# ACTUALIZAR handle_sofia_webhook para usar debug
# A√±adir al inicio de handle_sofia_webhook, despu√©s de print(f"Mensaje: {mensaje_usuario}")

def detectar_email(mensaje):
    """Detectar email en el mensaje"""
    email_match = re.search(r'[\w\.-]+@[\w\.-]+\.\w+', mensaje)
    return email_match.group() if email_match else None

def detectar_preferencia_a√±o(mensaje):
    """Detectar preferencia de a√±o para revoluci√≥n solar"""
    mensaje_lower = mensaje.lower()
    
    # Palabras clave para a√±o actual
    palabras_actual = ['actual', 'este a√±o', '2025', 'ahora', 'presente', 'ya']
    
    # Palabras clave para pr√≥ximo cumplea√±os
    palabras_proximo = ['pr√≥ximo', 'siguiente', 'cumplea√±os', 'pr√≥xima', 'futura', '2026']
    
    for palabra in palabras_actual:
        if palabra in mensaje_lower:
            return 'actual'
    
    for palabra in palabras_proximo:
        if palabra in mensaje_lower:
            return 'proximo'
    
    return None

def completar_datos_natales(datos_actuales, mensaje, tipo_servicio):
    """Completar datos natales seg√∫n el tipo de servicio"""
    mensaje_lower = mensaje.lower()

    # Detectar nombre
    if "me llamo" in mensaje_lower or "soy" in mensaje_lower:
        if "me llamo" in mensaje_lower:
            partes = mensaje_lower.split("me llamo")
            if len(partes) > 1:
                nombre = partes[1].strip().split()[0]
                if nombre:
                    datos_actuales["nombre"] = nombre.title()
                    
    # Detectar edad
    edad_patterns = [
        r'tengo (\d{1,2}) a√±os',
        r'(\d{1,2}) a√±os',
        r'edad (\d{1,2})',
        r'soy de (\d{1,2})'
    ]
    
    for pattern in edad_patterns:
        edad_match = re.search(pattern, mensaje_lower)
        if edad_match:
            edad = edad_match.group(1)
            if 10 <= int(edad) <= 99:
                datos_actuales["edad"] = edad
            break

    # Detectar fecha de nacimiento
    fecha_match = re.search(r'(\d{1,2})[/-](\d{1,2})[/-](\d{4})', mensaje)
    if fecha_match:
        dia, mes, a√±o = fecha_match.groups()
        datos_actuales["fecha_nacimiento"] = f"{dia:0>2}/{mes:0>2}/{a√±o}"

    # Detectar hora
    hora_match = re.search(r'(\d{1,2}):(\d{2})', mensaje)
    if hora_match:
        hora, minuto = hora_match.groups()
        datos_actuales["hora_nacimiento"] = f"{hora:0>2}:{minuto:0>2}"

    # Detectar lugar de nacimiento
    lugar_patterns = [
        r'(?:en|de|desde)\s+([^,]+)(?:,\s*([^,]+))?',
        r'(?:nac√≠|nacido|nacida)\s+en\s+([^,]+)(?:,\s*([^,]+))?'
    ]
    
    for pattern in lugar_patterns:
        lugar_match = re.search(pattern, mensaje_lower)
        if lugar_match:
            ciudad = lugar_match.group(1).strip().title()
            pais = lugar_match.group(2).strip().title() if lugar_match.group(2) else "Espa√±a"
            datos_actuales["lugar_nacimiento"] = f"{ciudad}, {pais}"

    # Detectar residencia actual
    residencia_patterns = [
        r'(?:vivo|resido|estoy)\s+en\s+([^,]+)(?:,\s*([^,]+))?',
        r'(?:residencia|actual)\s+([^,]+)(?:,\s*([^,]+))?'
    ]
    
    for pattern in residencia_patterns:
        res_match = re.search(pattern, mensaje_lower)
        if res_match:
            ciudad_res = res_match.group(1).strip().title()
            pais_res = res_match.group(2).strip().title() if res_match.group(2) else "Espa√±a"
            datos_actuales["residencia_actual"] = f"{ciudad_res}, {pais_res}"

    # L√ìGICA ESPEC√çFICA PARA ASTROLOG√çA HORARIA
    if tipo_servicio == 'astrologia_horaria_ia':
        # Detectar pregunta
        if "pregunta" in mensaje_lower or "quiero saber" in mensaje_lower or "¬ø" in mensaje:
            if "pregunta" in mensaje_lower:
                partes = mensaje.split("pregunta")
                if len(partes) > 1:
                    pregunta = partes[1].strip().strip(":").strip()
                    if pregunta:
                        datos_actuales["pregunta"] = pregunta
            elif "¬ø" in mensaje:
                datos_actuales["pregunta"] = mensaje.strip()
            else:
                datos_actuales["pregunta"] = mensaje.strip()
        
        # Detectar momento (actual vs espec√≠fico)
        if "ahora" in mensaje_lower or "momento actual" in mensaje_lower or "en este momento" in mensaje_lower:
            from datetime import datetime
            hoy = datetime.now()
            datos_actuales["fecha_pregunta"] = f"{hoy.day:02d}/{hoy.month:02d}/{hoy.year}"
            datos_actuales["hora_pregunta"] = f"{hoy.hour:02d}:{hoy.minute:02d}"
        
        # Si no especifica lugar, usar Madrid por defecto
        if "lugar_pregunta" not in datos_actuales:
            datos_actuales["lugar_pregunta"] = "Madrid, Espa√±a"

    # L√ìGICA ESPEC√çFICA PARA SINASTR√çA
    elif tipo_servicio == 'sinastria_ia':
        # Detectar si habla de 2 personas
        if "persona 1" in mensaje_lower or "primera persona" in mensaje_lower or "yo nac√≠" in mensaje_lower:
            fecha_match = re.search(r'(\d{1,2})[/-](\d{1,2})[/-](\d{4})', mensaje)
            if fecha_match:
                dia, mes, a√±o = fecha_match.groups()
                datos_actuales["fecha_nacimiento_p1"] = f"{dia:0>2}/{mes:0>2}/{a√±o}"
            
            hora_match = re.search(r'(\d{1,2}):(\d{2})', mensaje)
            if hora_match:
                hora, minuto = hora_match.groups()
                datos_actuales["hora_nacimiento_p1"] = f"{hora:0>2}:{minuto:0>2}"
                
        elif "persona 2" in mensaje_lower or "segunda persona" in mensaje_lower or "√©l naci√≥" in mensaje_lower or "ella naci√≥" in mensaje_lower:
            fecha_match = re.search(r'(\d{1,2})[/-](\d{1,2})[/-](\d{4})', mensaje)
            if fecha_match:
                dia, mes, a√±o = fecha_match.groups()
                datos_actuales["fecha_nacimiento_p2"] = f"{dia:0>2}/{mes:0>2}/{a√±o}"
            
            hora_match = re.search(r'(\d{1,2}):(\d{2})', mensaje)
            if hora_match:
                hora, minuto = hora_match.groups()
                datos_actuales["hora_nacimiento_p2"] = f"{hora:0>2}:{minuto:0>2}"
                
    # L√ìGICA ESPEC√çFICA PARA LECTURA DE MANOS
    elif tipo_servicio == 'lectura_manos_ia':
        # Detectar si es diestro o zurdo
        mano_patterns = [
            r'soy diestro', r'soy zurdo', r'mano derecha', r'mano izquierda',
            r'escribo con la derecha', r'escribo con la izquierda', r'diestro', r'zurdo'
        ]
        
        for pattern in mano_patterns:
            if pattern in mensaje_lower:
                if 'diestro' in pattern or 'derecha' in pattern:
                    datos_actuales["mano_dominante"] = "diestro"
                elif 'zurdo' in pattern or 'izquierda' in pattern:
                    datos_actuales["mano_dominante"] = "zurdo"
                break
        
        # Detectar confirmaci√≥n de fotos
        foto_patterns = [
            r'foto enviada', r'he enviado', r'ya envi√©', r'mando foto',
            r'env√≠o foto', r'ya mand√©', r'foto de mis manos', r'fotos listas',
            r'mis palmas', r'palmas'
        ]
        
        for pattern in foto_patterns:
            if pattern in mensaje_lower:
                datos_actuales["fotos_manos"] = "enviadas"
                break

    # L√ìGICA ESPEC√çFICA PARA LECTURA FACIAL
    elif tipo_servicio == 'lectura_facial_ia':
        # Detectar confirmaci√≥n de fotos
        foto_patterns = [
            r'foto enviada', r'he enviado', r'mando fotos', r'env√≠o fotos',
            r'ya mand√©', r'fotos de mi cara', r'fotos listas', r'3 fotos'
        ]
        
        for pattern in foto_patterns:
            if pattern in mensaje_lower:
                datos_actuales["fotos_facial"] = "enviadas"
                break
                
    elif tipo_servicio == 'grafologia_ia':
        # Detectar confirmaci√≥n de escritura
        escritura_patterns = [
            r'texto enviado', r'he enviado', r'mando texto', r'env√≠o escritura',
            r'ya escrib√≠', r'escritura lista', r'texto escrito', r'muestra de letra'
        ]
        
        for pattern in escritura_patterns:
            if pattern in mensaje_lower:
                datos_actuales["muestra_escritura"] = "enviada"
                break

    # Verificar completitud seg√∫n tipo de servicio
    if tipo_servicio in ['carta_astral_ia', 'revolucion_solar_ia']:
        campos_requeridos = ["nombre", "fecha_nacimiento", "hora_nacimiento", "lugar_nacimiento", "residencia_actual"]
    elif tipo_servicio == 'astrologia_horaria_ia':
        campos_requeridos = ["nombre", "pregunta", "fecha_pregunta", "hora_pregunta", "lugar_pregunta"]
    elif tipo_servicio == 'sinastria_ia':
        campos_requeridos = [
            "nombre_p1", "fecha_nacimiento_p1", "hora_nacimiento_p1", "lugar_nacimiento_p1",
            "nombre_p2", "fecha_nacimiento_p2", "hora_nacimiento_p2", "lugar_nacimiento_p2"
        ]
    elif tipo_servicio == 'psico_coaching_ia':
        campos_requeridos = ["nombre"]
    elif tipo_servicio == 'lectura_manos_ia':
        campos_requeridos = ["nombre", "mano_dominante", "fotos_manos"]
    elif tipo_servicio == 'lectura_facial_ia':
        campos_requeridos = ["nombre", "fotos_facial"]
    elif tipo_servicio == 'grafologia_ia':
        campos_requeridos = ["nombre", "muestra_escritura"]
    else:
        campos_requeridos = ["nombre", "fecha_nacimiento", "hora_nacimiento", "lugar_nacimiento"]
        
    completos = all(campo in datos_actuales for campo in campos_requeridos)
    return datos_actuales, completos

def calcular_a√±o_revolucion_solar(fecha_nacimiento_str, preferencia_a√±o):
    """Calcular el a√±o de revoluci√≥n solar seg√∫n preferencia"""
    try:
        dia, mes, a√±o = map(int, fecha_nacimiento_str.split('/'))
        
        # Fecha actual
        hoy = datetime.now()
        
        # Fecha de cumplea√±os este a√±o
        cumplea√±os_este_a√±o = datetime(hoy.year, mes, dia)
        
        if preferencia_a√±o == 'actual':
            # Revoluci√≥n solar del a√±o actual
            if hoy >= cumplea√±os_este_a√±o:
                a√±o_revolucion = hoy.year
            else:
                a√±o_revolucion = hoy.year - 1
        else:  # preferencia_a√±o == 'proximo'
            # Revoluci√≥n solar del pr√≥ximo cumplea√±os
            if hoy >= cumplea√±os_este_a√±o:
                a√±o_revolucion = hoy.year + 1
            else:
                a√±o_revolucion = hoy.year
        
        return a√±o_revolucion
        
    except Exception as e:
        print(f"Error calculando a√±o revoluci√≥n: {e}")
        return datetime.now().year

def generar_cartas_astrales_completas(datos_natales, archivos_unicos):
    """Generar cartas astrales completas (natal, progresiones, tr√°nsitos)"""
    try:
        # Generar carta natal
        carta_natal = CartaAstralNatal(
            nombre=datos_natales['nombre'],
            fecha_nacimiento=datos_natales['fecha_nacimiento'],
            hora_nacimiento=datos_natales['hora_nacimiento'],
            lugar_nacimiento=datos_natales['lugar_nacimiento'],
            residencia_actual=datos_natales['residencia_actual']
        )
        
        carta_natal.generar_carta_completa(archivo_salida=archivos_unicos['carta_natal_img'])
        
        # Generar progresiones
        datos_progresiones = generar_progresiones(datos_natales, archivos_unicos['progresiones_img'])
        
        # Generar tr√°nsitos
        datos_transitos = generar_transitos(datos_natales, archivos_unicos['transitos_img'])
        
        # Extraer datos para interpretaci√≥n
        datos_completos = extraer_datos_para_interpretacion(carta_natal, datos_progresiones, datos_transitos)
        
        print("‚úÖ Cartas astrales generadas correctamente")
        return True, datos_completos
        
    except Exception as e:
        print(f"‚ùå Error generando cartas astrales: {e}")
        return False, None

def generar_revoluciones_solares_completas(datos_natales, archivos_unicos, a√±o_revolucion):
    """Generar revoluci√≥n solar completa (5 cartas)"""
    try:
        # Generar carta natal base
        carta_natal = CartaAstralNatal(
            nombre=datos_natales['nombre'],
            fecha_nacimiento=datos_natales['fecha_nacimiento'],
            hora_nacimiento=datos_natales['hora_nacimiento'],
            lugar_nacimiento=datos_natales['lugar_nacimiento'],
            residencia_actual=datos_natales['residencia_actual']
        )
        
        carta_natal.generar_carta_completa(archivo_salida=archivos_unicos['carta_natal_img'])
        
        # Generar progresiones
        datos_progresiones = generar_progresiones(datos_natales, archivos_unicos['progresiones_img'])
        
        # Generar tr√°nsitos
        datos_transitos = generar_transitos(datos_natales, archivos_unicos['transitos_img'])
        
        # Generar revoluci√≥n solar sola
        datos_rev_sola = generar_revolucion_sola(datos_natales, archivos_unicos['revolucion_sola_img'], a√±o_revolucion)
        
        # Generar revoluci√≥n solar con natal
        datos_rev_natal = generar_revolucion_natal(datos_natales, archivos_unicos['revolucion_natal_img'], a√±o_revolucion)
        
        # Extraer datos para interpretaci√≥n
        datos_completos = extraer_datos_para_interpretacion(
            carta_natal, datos_progresiones, datos_transitos, 
            datos_rev_sola, datos_rev_natal, a√±o_revolucion
        )
        
        print("‚úÖ Revoluci√≥n solar completa generada correctamente")
        return True, datos_completos
        
    except Exception as e:
        print(f"‚ùå Error generando revoluci√≥n solar: {e}")
        return False, None

def extraer_datos_para_interpretacion(carta_natal, progresiones=None, transitos=None, rev_sola=None, rev_natal=None, a√±o_revolucion=None):
    """Extraer datos relevantes para la interpretaci√≥n IA"""
    try:
        datos = {
            'carta_natal': {
                'planetas': carta_natal.posiciones_planetas if hasattr(carta_natal, 'posiciones_planetas') else {},
                'casas': carta_natal.casas if hasattr(carta_natal, 'casas') else {},
                'aspectos': carta_natal.aspectos if hasattr(carta_natal, 'aspectos') else [],
                'signos': carta_natal.signos_planetas if hasattr(carta_natal, 'signos_planetas') else {}
            }
        }
        
        if progresiones:
            datos['progresiones'] = progresiones
        
        if transitos:
            datos['transitos'] = transitos
        
        if rev_sola:
            datos['revolucion_sola'] = rev_sola
            
        if rev_natal:
            datos['revolucion_natal'] = rev_natal
            
        if a√±o_revolucion:
            datos['a√±o_revolucion'] = a√±o_revolucion
        
        return datos
        
    except Exception as e:
        print(f"‚ùå Error extrayendo datos: {e}")
        return {}

def detectar_servicio_humano_agendable(mensaje):
    """Detectar si el cliente solicita servicio humano que Sofia puede agendar"""
    mensaje_lower = mensaje.lower()
    
    # Palabras clave para astr√≥logo humano
    astrologo_keywords = [
        'astr√≥logo humano', 'astr√≥loga humana', 'astrologo personal', 
        'consulta personal astrolog√≠a', 'astr√≥logo real', 'persona real astrolog√≠a'
    ]
    
    # Palabras clave para tarot humano  
    tarot_keywords = [
        'tarot humano', 'tarot personal', 'consulta tarot real',
        'tarotista', 'lectura tarot persona', 'tarot presencial'
    ]
    
    # Detectar tipo de servicio (SOLO los que maneja Sof√≠a)
    for keyword in astrologo_keywords:
        if keyword in mensaje_lower:
            return 'astrologo_humano'
    
    for keyword in tarot_keywords:
        if keyword in mensaje_lower:
            return 'tarot_humano'
    
    return None

def responder_ia_contextual(mensaje, contexto, numero_telefono):
    """Responder usando IA contextual"""
    try:
        # Contexto del flujo
        if contexto.get('esperando_email'):
            return "Hola, soy Sof√≠a, tu asistente astrol√≥gica. Para comenzar, necesito que me proporciones tu email, por favor."
        
        elif contexto.get('esperando_codigo'):
            return "Ahora necesito tu c√≥digo de servicio. Debe tener el formato AI_123456 para carta astral, RS_123456 para revoluci√≥n solar, etc."
        
        elif contexto.get('tipo_servicio') == 'carta_astral_ia':
            return "Necesito tus datos de nacimiento completos: fecha, hora exacta, ciudad y pa√≠s de nacimiento, y tu residencia actual."
        
        elif contexto.get('tipo_servicio') == 'revolucion_solar_ia':
            if not contexto.get('preferencia_a√±o'):
                return "Necesito tus datos de nacimiento completos: fecha, hora exacta, ciudad y pa√≠s de nacimiento, y tu residencia actual. Tambi√©n dime si quieres la revoluci√≥n solar del a√±o actual o del pr√≥ximo cumplea√±os."
            else:
                return "Necesito tus datos de nacimiento completos: fecha, hora exacta, ciudad y pa√≠s de nacimiento, y tu residencia actual."
        
        else:
            return "¬øEn qu√© puedo ayudarte hoy?"
            
    except Exception as e:
        print(f"Error en respuesta IA: {e}")
        return "¬øEn qu√© puedo ayudarte?"

def handle_sofia_webhook(data):
    """Handler principal de Sof√≠a - LIMPIO (sin interferir con WooCommerce)"""
    try:
        # ‚úÖ FIX ANTI-LOOP - A√ëADIDO
        if not data or not isinstance(data, dict):
            return {"status": "ok"}
        
        session_id = data.get("session_id")
        mensaje_usuario = data.get("text", "").strip()
        
        # SI NO HAY MENSAJE Y NO HAY SESSION, ES HEALTHCHECK
        if not mensaje_usuario and not session_id:
            print("üè• HEALTHCHECK detectado - respondiendo silenciosamente")
            return {"status": "ok"}
        
        # SI M√âTODO NO ES POST, ES VALIDACI√ìN  
        if request.method != 'POST':
            return {"status": "ok", "message": "Sofia webhook ready"}
        
        # SOLO CONTINUAR SI HAY CONTENIDO REAL
        if not mensaje_usuario or len(mensaje_usuario.strip()) < 2:
            print("‚ö†Ô∏è Request sin contenido real")
            return {"status": "ok"}
        
        # ‚úÖ AQU√ç CONTIN√öA TU L√ìGICA ORIGINAL
        archivos_unicos = data.get("archivos_unicos", {})
        id_unico = data.get("id_unico")
        
        # EXTRAER N√öMERO DE TEL√âFONO
        numero_telefono = obtener_numero_telefono_desde_vapi(data)
        
        print(f"=== WEBHOOK SOF√çA (AS CARTASTRAL) ===")
        print(f"Session ID: {session_id}")
        print(f"N√∫mero tel√©fono: {numero_telefono}")
        print(f"Mensaje: {mensaje_usuario}")
        
        # DEBUG: Reconocimiento de c√≥digos
        if mensaje_usuario and len(mensaje_usuario) > 3:
            debug_reconocimiento_codigo(mensaje_usuario)

        # PASO 1: VERIFICAR RECONEXI√ìN AUTOM√ÅTICA O SESI√ìN ACTIVA
        sesion_activa = None
        if numero_telefono:
            # Verificar reconexi√≥n autom√°tica (corte reciente)
            sesion_reconexion = verificar_sesion_activa(numero_telefono)
            
            if sesion_reconexion:
                print(f"üîÑ Reconexi√≥n autom√°tica detectada: {sesion_reconexion['codigo_servicio']}")
                return manejar_reconexion(sesion_reconexion, data)
            
            # Buscar sesi√≥n activa normal
            try:
                sesion_activa = seguimiento.buscar_sesion_activa(numero_telefono)
            except Exception as e:
                print(f"‚ùå Error buscando sesi√≥n activa: {e}")
                sesion_activa = None
        
        if sesion_activa:
            print(f"üîÑ Sesi√≥n activa encontrada: {sesion_activa['codigo_servicio']}")
            
            # Cliente tiene sesi√≥n activa - continuar conversaci√≥n
            tiempo_restante = datetime.fromisoformat(sesion_activa['fecha_expiracion']) - datetime.now()
            horas_restantes = int(tiempo_restante.total_seconds() / 3600)
            
            # Mensaje de bienvenida para cliente que regresa
            if sesion_activa['tipo_servicio'] == 'carta_astral_ia' and sesion_activa['puede_revolucion_solar']:
                mensaje_bienvenida = f"¬°Hola de nuevo! Te quedan {horas_restantes} horas para seguir nuestra conversaci√≥n. ¬øQuieres continuar con tu carta astral o prefieres que te haga la revoluci√≥n solar GRATIS?"
            else:
                mensaje_bienvenida = f"¬°Hola de nuevo! Te quedan {horas_restantes} horas para seguir nuestra conversaci√≥n. ¬øEn qu√© puedo ayudarte?"
            
            # Caso especial: sesi√≥n pendiente de fotos
            if sesion_activa.get('estado') == 'pendiente_fotos':
                if sesion_activa['tipo_servicio'] == 'lectura_manos_ia':
                    mensaje_bienvenida = f"¬°Hola de nuevo! ¬øYa enviaste las fotos de tus manos por email?"
                elif sesion_activa['tipo_servicio'] == 'lectura_facial_ia':
                    mensaje_bienvenida = f"¬°Hola de nuevo! ¬øYa enviaste las 3 fotos de tu rostro por email?"
                
                # Detectar confirmaci√≥n de fotos
                confirmacion_patterns = ['s√≠', 'si', 'ya envi√©', 'ya mand√©', 'ya las envi√©', 'enviadas', 'listo', 'hecho', 'palmas', 'mis palmas']
                confirmacion_fotos = any(pattern in mensaje_usuario.lower() for pattern in confirmacion_patterns)

                if confirmacion_fotos:
                    # Cambiar estado a fotos confirmadas
                    seguimiento.actualizar_estado_sesion(sesion_activa['id'], 'fotos_confirmadas')
                    
                    if sesion_activa['tipo_servicio'] == 'lectura_manos_ia':
                        return {"type": "speak", "text": "Perfecto. Ahora necesito que me digas tu nombre y si eres diestro o zurdo, por favor."}
                    elif sesion_activa['tipo_servicio'] == 'lectura_facial_ia':
                        return {"type": "speak", "text": "Perfecto. Ahora necesito que me digas tu nombre, por favor."}
                else:
                    return {"type": "speak", "text": mensaje_bienvenida}
        
            # Actualizar conversaci√≥n
            seguimiento.actualizar_conversacion(sesion_activa['id'], {
                'tipo': 'cliente_regresa',
                'mensaje': mensaje_usuario
            })
            
            # TRANSFERIR DIRECTAMENTE AL ESPECIALISTA CON DATOS EXISTENTES
            especialistas = {
                'carta_astral_ia': 'asst_78f4bfbd-cf67-46cb-910d-c8f0f8adf3fc',
                'revolucion_solar_ia': 'asst_9513ec30-f231-4171-959c-26c8588d248e', 
                'sinastria_ia': 'asst_9960b33c-db72-4ebd-ae3e-69ce6f7e6660',
                'astrologia_horaria_ia': 'asst_d218cde4-d4e1-4943-8fd9-a1df9404ebd6',
                'psico_coaching_ia': 'asst_63a0f9b9-c5d5-4df6-ba6f-52d700b51275',
                'lectura_manos_ia': 'asst_8473d3ab-22a7-479c-ae34-427e992023de',
                'lectura_facial_ia': 'asst_9cae2faa-2a8e-498b-b8f4-ab7af65bf734',
                'grafologia_ia': 'asst_84c67029-8059-4066-a5ae-8532b99fd24c'
            }
            
            especialista = especialistas.get(sesion_activa['tipo_servicio'])
            
            if especialista:
                return {
                    "type": "transfer_call",
                    "transfer": {
                        "type": "assistant", 
                        "assistantId": especialista
                    },
                    "data_extra": {
                        "sesion_activa": sesion_activa,
                        "cliente_regresa": True,
                        "mensaje_bienvenida": mensaje_bienvenida
                    }
                }
            else:
                return {"type": "speak", "text": mensaje_bienvenida}

        # PASO 2: NUEVA SESI√ìN - GESTI√ìN DE CONTEXTO
        contexto_sesion = sessions.get(session_id, {})
        
        # MANEJAR AGENDAMIENTO DE CITAS HUMANAS CON BD
        if contexto_sesion.get('agendando_cita'):
            tipo_servicio_humano = contexto_sesion.get('tipo_servicio_humano')
            
            # Detectar horario elegido
            import re
            horario_match = re.search(r'(\d{1,2}):(\d{2})-(\d{1,2}):(\d{2})', mensaje_usuario)
            
            if horario_match and not contexto_sesion.get('horario_elegido'):
                horario_elegido = f"{horario_match.group(1)}:{horario_match.group(2)}-{horario_match.group(3)}:{horario_match.group(4)}"
                contexto_sesion['horario_elegido'] = horario_elegido
                sessions[session_id] = contexto_sesion
                
                servicio_nombre = "Astr√≥logo Personal" if tipo_servicio_humano == 'astrologo_humano' else "Tarot Personal"
                return {"type": "speak", "text": f"Perfecto, {horario_elegido} para {servicio_nombre}. Ahora necesito tu nombre completo y email para confirmar la cita."}
            
            # Recopilar datos para la cita
            elif contexto_sesion.get('horario_elegido'):
                datos_cita = contexto_sesion.get('datos_cita', {})
                
                # Detectar nombre
                if "me llamo" in mensaje_usuario.lower() or not datos_cita.get('nombre'):
                    if "me llamo" in mensaje_usuario.lower():
                        partes = mensaje_usuario.lower().split("me llamo")
                        if len(partes) > 1:
                            nombre = partes[1].strip().split(',')[0].split('y')[0].strip()
                            datos_cita['nombre'] = nombre.title()
                    else:
                        # Asumir que todo el mensaje es el nombre si no tiene "me llamo"
                        nombre_limpio = re.sub(r'[^a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]', '', mensaje_usuario).strip()
                        if nombre_limpio:
                            datos_cita['nombre'] = nombre_limpio.title()
                
                # Detectar email
                email_detectado = detectar_email(mensaje_usuario)
                if email_detectado:
                    datos_cita['email'] = email_detectado
                
                # A√±adir tel√©fono si disponible
                if numero_telefono:
                    datos_cita['telefono'] = numero_telefono
                
                contexto_sesion['datos_cita'] = datos_cita
                sessions[session_id] = contexto_sesion
                
                # Verificar si tenemos todos los datos
                if datos_cita.get('nombre') and datos_cita.get('email'):
                    # Confirmar cita usando BD
                    from datetime import datetime, timedelta
                    fecha_cita = datetime.now() + timedelta(days=1)
                    
                    exito, confirmacion = agendar_cita_humana_sofia(
                        datos_cita, 
                        tipo_servicio_humano, 
                        contexto_sesion['horario_elegido'],
                        fecha_cita,
                        contexto_sesion.get('codigo_servicio', '')
                    )
                    
                    if exito:
                        # Limpiar sesi√≥n
                        sessions.pop(session_id, None)
                        
                        return {"type": "speak", "text": f"¬°Perfecto! Tu cita con {confirmacion['servicio']} est√° confirmada para {confirmacion['fecha']} a las {confirmacion['horario']}. C√≥digo de reserva: {confirmacion['codigo_reserva']}. Te enviaremos un recordatorio por email a {datos_cita['email']}. ¬°Hasta entonces!"}
                    else:
                        return {"type": "speak", "text": "Disculpa, ha ocurrido un error al agendar tu cita. Por favor, int√©ntalo m√°s tarde."}
                else:
                    # Pedir datos faltantes
                    if not datos_cita.get('nombre'):
                        return {"type": "speak", "text": "¬øCu√°l es tu nombre completo?"}
                    elif not datos_cita.get('email'):
                        return {"type": "speak", "text": "¬øCu√°l es tu email para enviarte la confirmaci√≥n?"}
            
            # Continuar en flujo de agendamiento
            return {"type": "speak", "text": "¬øQu√© horario prefieres? Dime la hora exacta, por ejemplo: 11:00-12:00"}

        # DETECTAR SI SOLICITA SERVICIO HUMANO QUE SOFIA PUEDE AGENDAR
        servicio_humano_agendable = detectar_servicio_humano_agendable(mensaje_usuario)
        if servicio_humano_agendable and not contexto_sesion.get('agendando_cita'):
            contexto_sesion['agendando_cita'] = True
            contexto_sesion['tipo_servicio_humano'] = servicio_humano_agendable
            sessions[session_id] = contexto_sesion
            
            # Obtener horarios disponibles para ma√±ana
            from datetime import datetime, timedelta
            ma√±ana = datetime.now() + timedelta(days=1)
            horarios = obtener_horarios_disponibles_sofia(servicio_humano_agendable, ma√±ana)
            
            servicio_nombre = "Astr√≥logo Personal" if servicio_humano_agendable == 'astrologo_humano' else "Tarot Personal"
            
            if horarios:
                horarios_texto = ", ".join(horarios[:5])  # Mostrar solo 5 primeros
                return {"type": "speak", "text": f"Perfecto, quieres una cita con nuestro {servicio_nombre}. Para ma√±ana {ma√±ana.strftime('%d/%m/%Y')} tengo disponible: {horarios_texto}. ¬øCu√°l prefieres? Tambi√©n necesitar√© tu nombre y email."}
            else:
                return {"type": "speak", "text": f"Para {servicio_nombre}, no tengo horarios disponibles ma√±ana. ¬øTe interesa otro d√≠a de la semana?"}

# FLUJO MEJORADO: C√ìDIGO PRIMERO ‚Üí EMAIL AUTOM√ÅTICO
        
        # Detectar y validar c√≥digo si se proporciona
        if not contexto_sesion.get('codigo_validado'):
            codigo_valido, tipo_servicio = validar_codigo_servicio(mensaje_usuario)
            
            if codigo_valido:
                print(f"üîç DEBUG: C√≥digo v√°lido recibido: {mensaje_usuario.upper().strip()}")
                
                # NUEVO: Buscar email asociado al c√≥digo en WooCommerce
                try:
                    from main import buscar_email_por_codigo, marcar_codigo_usado
                    
                    email_asociado, tipo_woo = buscar_email_por_codigo(mensaje_usuario.upper().strip())
                    print(f"üîç DEBUG: Email encontrado: {email_asociado}, Tipo: {tipo_woo}")
                    
                    if email_asociado:
                        # C√≥digo encontrado en WooCommerce - flujo autom√°tico
                        contexto_sesion['email'] = email_asociado
                        contexto_sesion['codigo_servicio'] = mensaje_usuario.upper().strip()
                        contexto_sesion['tipo_servicio'] = tipo_servicio
                        contexto_sesion['codigo_validado'] = True
                        contexto_sesion['datos_natales'] = {'email': email_asociado}
                        sessions[session_id] = contexto_sesion
                        
                        # Marcar c√≥digo como usado
                        marcar_codigo_usado(mensaje_usuario.upper().strip())
                        print(f"‚úÖ C√≥digo marcado como usado: {mensaje_usuario.upper().strip()}")
                        
                        # Mensaje de confirmaci√≥n personalizado por servicio
                        if tipo_servicio == 'carta_astral_ia':
                            return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Necesito tus datos de nacimiento: fecha, hora, ciudad y pa√≠s de nacimiento, y tu residencia actual. La sesi√≥n dura 40 minutos."}
                        elif tipo_servicio == 'revolucion_solar_ia':
                            return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Necesito tus datos de nacimiento: fecha, hora, ciudad y pa√≠s de nacimiento, y tu residencia actual. Tambi√©n dime si quieres la revoluci√≥n solar del a√±o actual o del pr√≥ximo cumplea√±os. La sesi√≥n dura 50 minutos."}
                        elif tipo_servicio == 'sinastria_ia':
                            return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Necesito los datos de nacimiento de las 2 personas: fecha, hora, ciudad y pa√≠s de nacimiento de ambos. La sesi√≥n dura 30 minutos."}
                        elif tipo_servicio == 'astrologia_horaria_ia':
                            return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Necesito tu nombre y tu pregunta espec√≠fica. La sesi√≥n dura 15 minutos."}
                        elif tipo_servicio == 'lectura_manos_ia':
                            # Enviar email autom√°tico con instrucciones
                            email_enviado = enviar_email_instrucciones_fotos(email_asociado, 'Cliente', tipo_servicio)
                            if email_enviado:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Te he enviado instrucciones para subir las fotos de tus palmas. Revisa tu email, responde con las fotos y llama cuando las hayas enviado. La sesi√≥n dura 30 minutos."}
                            else:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Env√≠a las fotos de tus palmas por email y dime tu nombre para continuar. La sesi√≥n dura 30 minutos."}
                        elif tipo_servicio == 'lectura_facial_ia':
                            # Enviar email autom√°tico con instrucciones
                            email_enviado = enviar_email_instrucciones_fotos(email_asociado, 'Cliente', tipo_servicio)
                            if email_enviado:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Te he enviado instrucciones para las 3 fotos necesarias. Revisa tu email, responde con las fotos y llama cuando las hayas enviado. La sesi√≥n dura 15 minutos."}
                            else:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Env√≠a las 3 fotos de tu rostro por email y dime tu nombre para continuar. La sesi√≥n dura 15 minutos."}
                        elif tipo_servicio == 'psico_coaching_ia':
                            return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Dime tu nombre para empezar la sesi√≥n de psico-coaching. La sesi√≥n dura 45 minutos."}
                        elif tipo_servicio == 'grafologia_ia':
                            # Enviar email autom√°tico con instrucciones
                            email_enviado = enviar_email_instrucciones_fotos(email_asociado, 'Cliente', tipo_servicio)
                            if email_enviado:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Te he enviado instrucciones para tu muestra de escritura. Revisa tu email, responde con la foto de tu texto y llama cuando lo hayas enviado. La sesi√≥n dura 30 minutos."}
                            else:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Env√≠a una muestra de tu escritura por email y dime tu nombre para continuar. La sesi√≥n dura 30 minutos."}
                        elif tipo_servicio == 'grafologia_ia':
                            # Enviar email autom√°tico con instrucciones
                            email_enviado = enviar_email_instrucciones_fotos(email_asociado, 'Cliente', tipo_servicio)
                            if email_enviado:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Te he enviado instrucciones para tu muestra de escritura. Revisa tu email, responde con la foto de tu texto y llama cuando lo hayas enviado. La sesi√≥n dura 30 minutos."}
                            else:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Env√≠a una muestra de tu escritura por email y dime tu nombre para continuar. La sesi√≥n dura 30 minutos."}

                        
                        # SERVICIOS HUMANOS - INICIAR AGENDAMIENTO
                        elif tipo_servicio == 'astrologo_humano':
                            contexto_sesion['agendando_cita'] = True
                            contexto_sesion['tipo_servicio_humano'] = tipo_servicio
                            sessions[session_id] = contexto_sesion
                            
                            # Obtener horarios disponibles para ma√±ana
                            from datetime import datetime, timedelta
                            ma√±ana = datetime.now() + timedelta(days=1)
                            horarios = obtener_horarios_disponibles_sofia(tipo_servicio, ma√±ana)
                            
                            if horarios:
                                horarios_texto = ", ".join(horarios[:5])
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Para Astr√≥logo Personal ma√±ana {ma√±ana.strftime('%d/%m/%Y')} tengo: {horarios_texto}. ¬øCu√°l prefieres? Tambi√©n necesitar√© tu nombre."}
                            else:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Para Astr√≥logo Personal no tengo horarios ma√±ana. ¬øTe interesa otro d√≠a?"}
                        
                        elif tipo_servicio == 'tarot_humano':
                            contexto_sesion['agendando_cita'] = True
                            contexto_sesion['tipo_servicio_humano'] = tipo_servicio
                            sessions[session_id] = contexto_sesion
                            
                            # Obtener horarios disponibles para ma√±ana
                            from datetime import datetime, timedelta
                            ma√±ana = datetime.now() + timedelta(days=1)
                            horarios = obtener_horarios_disponibles_sofia(tipo_servicio, ma√±ana)
                            
                            if horarios:
                                horarios_texto = ", ".join(horarios[:5])
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Para Tarot Personal ma√±ana {ma√±ana.strftime('%d/%m/%Y')} tengo: {horarios_texto}. ¬øCu√°l prefieres? Tambi√©n necesitar√© tu nombre."}
                            else:
                                return {"type": "speak", "text": f"Perfecto, c√≥digo confirmado para {email_asociado}. Para Tarot Personal no tengo horarios ma√±ana. ¬øTe interesa otro d√≠a?"}
                    
                    else:
                        # C√≥digo v√°lido pero no encontrado en WooCommerce - flujo manual
                        print(f"‚ö†Ô∏è DEBUG: C√≥digo v√°lido pero no en WooCommerce: {mensaje_usuario.upper().strip()}")
                        contexto_sesion['codigo_servicio'] = mensaje_usuario.upper().strip()
                        contexto_sesion['tipo_servicio'] = tipo_servicio
                        contexto_sesion['esperando_email'] = True
                        contexto_sesion['codigo_validado'] = True
                        sessions[session_id] = contexto_sesion
                        
                        return {"type": "speak", "text": f"C√≥digo {mensaje_usuario.upper().strip()} confirmado. Ahora necesito tu email para continuar, por favor."}
                        
                except ImportError:
                    print("‚ö†Ô∏è DEBUG: No se pudo importar funci√≥n de b√∫squeda, usando flujo manual")
                    # Fallback al flujo manual
                    contexto_sesion['codigo_servicio'] = mensaje_usuario.upper().strip()
                    contexto_sesion['tipo_servicio'] = tipo_servicio
                    contexto_sesion['esperando_email'] = True
                    contexto_sesion['codigo_validado'] = True
                    sessions[session_id] = contexto_sesion
                    
                    return {"type": "speak", "text": f"C√≥digo {mensaje_usuario.upper().strip()} confirmado. Ahora necesito tu email, por favor."}
            
            else:
                # No es un c√≥digo v√°lido - pedir c√≥digo
                return {"type": "speak", "text": "Hola, soy Sof√≠a de AS Cartastral. Para comenzar, dime tu c√≥digo de servicio. Debe tener formato AI_123456, RS_123456, etc."}
        
        # Si ya tiene c√≥digo validado pero necesita email (flujo manual)
        if contexto_sesion.get('esperando_email') and contexto_sesion.get('codigo_validado'):
            email_detectado = detectar_email(mensaje_usuario)
            if email_detectado:
                contexto_sesion['email'] = email_detectado
                contexto_sesion['esperando_email'] = False
                contexto_sesion['datos_natales'] = {'email': email_detectado}
                sessions[session_id] = contexto_sesion
                
                tipo_servicio = contexto_sesion['tipo_servicio']
                if tipo_servicio == 'carta_astral_ia':
                    return {"type": "speak", "text": f"Perfecto, {email_detectado}. Ahora necesito tus datos de nacimiento: fecha, hora, ciudad y pa√≠s de nacimiento, y tu residencia actual. La sesi√≥n dura 40 minutos."}
                # ... (resto de servicios igual)
                
            else:
                return {"type": "speak", "text": "No he detectado un email v√°lido. Por favor, dime tu email claramente."}
            codigo_valido, tipo_servicio = validar_codigo_servicio(mensaje_usuario)
            
            if codigo_valido and contexto_sesion.get('email'):
                contexto_sesion['codigo_servicio'] = mensaje_usuario.upper().strip()
                # NUEVO: Marcar c√≥digo de WooCommerce como usado
                try:
                    from main import marcar_codigo_usado
                    marcar_codigo_usado(mensaje_usuario.upper().strip())
                    print(f"‚úÖ C√≥digo marcado como usado: {mensaje_usuario.upper().strip()}")
                except ImportError:
                    print("‚ö†Ô∏è No se pudo marcar c√≥digo como usado (funci√≥n no disponible)")
                except Exception as e:
                    print(f"‚ö†Ô∏è Error marcando c√≥digo usado: {e}")
                contexto_sesion['tipo_servicio'] = tipo_servicio
                contexto_sesion['esperando_codigo'] = False
                contexto_sesion['datos_natales'] = {'email': contexto_sesion['email']}
                sessions[session_id] = contexto_sesion
                
                # Mensajes espec√≠ficos por tipo de servicio
                if tipo_servicio == 'carta_astral_ia':
                    return {"type": "speak", "text": "C√≥digo confirmado para carta astral por IA. Ahora necesito tus datos de nacimiento: fecha, hora, ciudad y pa√≠s de nacimiento, y tu residencia actual, por favor. La sesi√≥n dura 40 minutos."}
                elif tipo_servicio == 'revolucion_solar_ia':
                    return {"type": "speak", "text": "C√≥digo confirmado para revoluci√≥n solar. Necesito tus datos de nacimiento: fecha, hora, ciudad y pa√≠s de nacimiento, y tu residencia actual. Tambi√©n dime si quieres la revoluci√≥n solar del a√±o actual o del pr√≥ximo cumplea√±os. La sesi√≥n dura 50 minutos."}
                elif tipo_servicio == 'sinastria_ia':
                    return {"type": "speak", "text": "C√≥digo confirmado para sinastr√≠a. Necesito los datos de nacimiento de las 2 personas: fecha, hora, ciudad y pa√≠s de nacimiento de ambos."}
                elif tipo_servicio == 'astrologia_horaria_ia':
                    return {"type": "speak", "text": "C√≥digo confirmado para astrolog√≠a horaria. Necesito tu nombre y tu pregunta espec√≠fica, por favor."}
                elif tipo_servicio == 'lectura_manos_ia':
                    # Enviar email autom√°tico con instrucciones
                    email_enviado = enviar_email_instrucciones_fotos(
                        contexto_sesion['email'], 
                        'Cliente',
                        tipo_servicio
                    )
                    
                    if email_enviado:
                        return {"type": "speak", "text": "C√≥digo confirmado para lectura de manos. Te he enviado un email con instrucciones para subir las fotos de tus palmas. Revisa tu email, responde con las fotos y llama cuando las hayas enviado. ¬øDe acuerdo?"}
                    else:
                        return {"type": "speak", "text": "C√≥digo confirmado para lectura de manos. Por favor, env√≠a las fotos de tus palmas por email y dime tu nombre para continuar."}
                        
                elif tipo_servicio == 'lectura_facial_ia':
                    # Enviar email autom√°tico con instrucciones
                    email_enviado = enviar_email_instrucciones_fotos(
                        contexto_sesion['email'], 
                        'Cliente',
                        tipo_servicio
                    )
                    
                    if email_enviado:
                        return {"type": "speak", "text": "C√≥digo confirmado para lectura facial. Te he enviado un email con instrucciones para las 3 fotos necesarias. Revisa tu email, responde con las fotos y llama cuando las hayas enviado."}
                    else:
                        return {"type": "speak", "text": "C√≥digo confirmado para lectura facial. Por favor, env√≠a las 3 fotos de tu rostro por email y dime tu nombre para continuar."}
                elif tipo_servicio == 'psico_coaching_ia':
                    return {"type": "speak", "text": "C√≥digo confirmado para psico-coaching. Dime tu nombre por favor."}
                
                # SERVICIOS HUMANOS - INICIAR AGENDAMIENTO
                elif tipo_servicio == 'astrologo_humano':
                    contexto_sesion['agendando_cita'] = True
                    contexto_sesion['tipo_servicio_humano'] = tipo_servicio
                    sessions[session_id] = contexto_sesion
                    
                    # Obtener horarios disponibles para ma√±ana
                    from datetime import datetime, timedelta
                    ma√±ana = datetime.now() + timedelta(days=1)
                    horarios = obtener_horarios_disponibles_sofia(tipo_servicio, ma√±ana)
                    
                    if horarios:
                        horarios_texto = ", ".join(horarios[:5])
                        return {"type": "speak", "text": f"C√≥digo confirmado para Astr√≥logo Personal. Para ma√±ana {ma√±ana.strftime('%d/%m/%Y')} tengo disponible: {horarios_texto}. ¬øCu√°l prefieres? Tambi√©n necesitar√© tu nombre y email para confirmar la cita."}
                    else:
                        return {"type": "speak", "text": "C√≥digo confirmado para Astr√≥logo Personal. No tengo horarios disponibles ma√±ana. ¬øTe interesa otro d√≠a de la semana?"}
                
                elif tipo_servicio == 'tarot_humano':
                    contexto_sesion['agendando_cita'] = True
                    contexto_sesion['tipo_servicio_humano'] = tipo_servicio
                    sessions[session_id] = contexto_sesion
                    
                    # Obtener horarios disponibles para ma√±ana
                    from datetime import datetime, timedelta
                    ma√±ana = datetime.now() + timedelta(days=1)
                    horarios = obtener_horarios_disponibles_sofia(tipo_servicio, ma√±ana)
                    
                    if horarios:
                        horarios_texto = ", ".join(horarios[:5])
                        return {"type": "speak", "text": f"C√≥digo confirmado para Tarot Personal. Para ma√±ana {ma√±ana.strftime('%d/%m/%Y')} tengo disponible: {horarios_texto}. ¬øCu√°l prefieres? Tambi√©n necesitar√© tu nombre y email para confirmar la cita."}
                    else:
                        return {"type": "speak", "text": "C√≥digo confirmado para Tarot Personal. No tengo horarios disponibles ma√±ana. ¬øTe interesa otro d√≠a de la semana?"}
                
                else:
                    return {"type": "speak", "text": f"C√≥digo confirmado para {tipo_servicio}. ¬øQu√© datos necesitas proporcionarme?"}

        # RECOPILAR DATOS NATALES
        if contexto_sesion.get('tipo_servicio') and not contexto_sesion.get('datos_completos'):
            datos_natales = contexto_sesion.get('datos_natales', {'email': contexto_sesion.get('email', '')})
            
            # Para revoluci√≥n solar, detectar preferencia de a√±o
            if contexto_sesion['tipo_servicio'] == 'revolucion_solar_ia' and not contexto_sesion.get('preferencia_a√±o'):
                preferencia_a√±o = detectar_preferencia_a√±o(mensaje_usuario)
                if preferencia_a√±o:
                    contexto_sesion['preferencia_a√±o'] = preferencia_a√±o
                    sessions[session_id] = contexto_sesion
                    a√±o_str = "del a√±o actual" if preferencia_a√±o == 'actual' else "del pr√≥ximo cumplea√±os"
                    return {"type": "speak", "text": f"Perfecto, revoluci√≥n solar {a√±o_str}. Ahora necesito tus datos de nacimiento completos."}
            
            datos_natales, completos = completar_datos_natales(
                datos_natales, mensaje_usuario, contexto_sesion['tipo_servicio']
            )
            
            contexto_sesion['datos_natales'] = datos_natales
            sessions[session_id] = contexto_sesion
            
            if completos:
                print("üéØ Datos completos, generando cartas y registrando sesi√≥n...")
                
                # REGISTRAR SESI√ìN EN SISTEMA DE SEGUIMIENTO
                if numero_telefono:
                    sesion_id_db, fecha_expiracion = seguimiento.registrar_nueva_sesion(
                        numero_telefono=numero_telefono,
                        codigo_servicio=contexto_sesion['codigo_servicio'],
                        tipo_servicio=contexto_sesion['tipo_servicio'],
                        email=datos_natales['email'],
                        datos_natales=datos_natales
                    )
                
                # Cambiar estado para servicios con fotos
                if contexto_sesion['tipo_servicio'] in ['lectura_manos_ia', 'lectura_facial_ia'] and sesion_id_db:
                    seguimiento.actualizar_estado_sesion(sesion_id_db, 'pendiente_fotos')
                    print(f"üîÑ Estado cambiado a 'pendiente_fotos' para {contexto_sesion['tipo_servicio']}")
                
                # GENERAR CARTAS SEG√öN TIPO DE SERVICIO
                timestamp = int(time.time())
                
                if contexto_sesion['tipo_servicio'] == 'carta_astral_ia':
                    # DEFINIR ARCHIVOS √öNICOS PARA CARTA ASTRAL
                    archivos_unicos = {
                        'carta_natal_img': f'static/carta_natal_test_{timestamp}.png',
                        'progresiones_img': f'static/progresiones_test_{timestamp}.png',
                        'transitos_img': f'static/transitos_test_{timestamp}.png'
                    }
                    
                    exito, datos_interpretacion = generar_cartas_astrales_completas(datos_natales, archivos_unicos)
                    
                elif contexto_sesion['tipo_servicio'] == 'revolucion_solar_ia':
                    # CALCULAR A√ëO DE REVOLUCI√ìN SOLAR
                    preferencia_a√±o = contexto_sesion.get('preferencia_a√±o', 'actual')
                    a√±o_revolucion = calcular_a√±o_revolucion_solar(datos_natales['fecha_nacimiento'], preferencia_a√±o)
                    
                    # DEFINIR ARCHIVOS √öNICOS PARA REVOLUCI√ìN SOLAR (5 cartas)
                    archivos_unicos = {
                        'carta_natal_img': f'static/carta_natal_rs_{timestamp}.png',
                        'progresiones_img': f'static/progresiones_rs_{timestamp}.png',
                        'transitos_img': f'static/transitos_rs_{timestamp}.png',
                        'revolucion_sola_img': f'static/revolucion_sola_{timestamp}.png',
                        'revolucion_natal_img': f'static/revolucion_natal_{timestamp}.png'
                    }
                    
                    exito, datos_interpretacion = generar_revoluciones_solares_completas(datos_natales, archivos_unicos, a√±o_revolucion)
                
                # Para otros servicios, usar funciones existentes
                else:
                    datos_interpretacion = {
                        'tipo_servicio': contexto_sesion['tipo_servicio'],
                        'datos_cliente': datos_natales
                    }
                
                # TRANSFERIR AL ESPECIALISTA
                especialistas = {
                    'carta_astral_ia': 'asst_78f4bfbd-cf67-46cb-910d-c8f0f8adf3fc',
                    'revolucion_solar_ia': 'asst_9513ec30-f231-4171-959c-26c8588d248e', 
                    'sinastria_ia': 'asst_9960b33c-db72-4ebd-ae3e-69ce6f7e6660',
                    'astrologia_horaria_ia': 'asst_d218cde4-d4e1-4943-8fd9-a1df9404ebd6',
                    'psico_coaching_ia': 'asst_63a0f9b9-c5d5-4df6-ba6f-52d700b51275',
                    'lectura_manos_ia': 'asst_8473d3ab-22a7-479c-ae34-427e992023de',
                    'lectura_facial_ia': 'asst_9cae2faa-2a8e-498b-b8f4-ab7af65bf734',
                    'grafologia_ia': 'asst_84c67029-8059-4066-a5ae-8532b99fd24c'
                }
                
                # BUSCAR FOTOS PARA SERVICIOS QUE LAS NECESITAN
                if contexto_sesion['tipo_servicio'] in ['lectura_manos_ia', 'lectura_facial_ia']:
                    email_cliente = datos_natales.get('email')
                    fotos_encontradas = buscar_fotos_cliente_email(email_cliente)
                    
                    if fotos_encontradas:
                        for i, foto in enumerate(fotos_encontradas):
                            if contexto_sesion['tipo_servicio'] == 'lectura_manos_ia':
                                if i == 0:
                                    archivos_unicos['mano_izquierda_img'] = foto['filepath']
                                elif i == 1:
                                    archivos_unicos['mano_derecha_img'] = foto['filepath']
                            elif contexto_sesion['tipo_servicio'] == 'lectura_facial_ia':
                                if i == 0:
                                    archivos_unicos['cara_frente_img'] = foto['filepath']
                                elif i == 1:
                                    archivos_unicos['cara_izquierda_img'] = foto['filepath']
                                elif i == 2:
                                    archivos_unicos['cara_derecha_img'] = foto['filepath']
                        
                        marcar_fotos_como_procesadas(email_cliente)
                        print(f"‚úÖ Fotos encontradas para {email_cliente}: {len(fotos_encontradas)}")
                
                especialista = especialistas.get(contexto_sesion['tipo_servicio'])
                
                if especialista:
                    # Mensaje de recordatorio seg√∫n tipo de servicio
                    if contexto_sesion['tipo_servicio'] == 'carta_astral_ia':
                        mensaje_final = "Perfecto. Te paso ahora con nuestra astr√≥loga especialista. Recuerda que tienes 40 minutos de sesi√≥n y tiempo adicional para seguir la conversaci√≥n desde este tel√©fono, y tambi√©n puedes pedir revoluci√≥n solar gratis. Un momento, por favor."
                    elif contexto_sesion['tipo_servicio'] == 'revolucion_solar_ia':
                        mensaje_final = "Perfecto. Te paso ahora con nuestra astr√≥loga especialista en revoluci√≥n solar. Recuerda que tienes 50 minutos de sesi√≥n y tiempo adicional para seguir la conversaci√≥n desde este tel√©fono. Un momento, por favor."
                    elif contexto_sesion['tipo_servicio'] in ['sinastria_ia', 'lectura_manos_ia']:
                        duracion = DURACIONES_SERVICIO.get(contexto_sesion['tipo_servicio'], 30)
                        mensaje_final = f"Perfecto. Te paso ahora con nuestro especialista. Recuerda que tienes {duracion} minutos de sesi√≥n y tiempo adicional para seguir la conversaci√≥n desde este tel√©fono. Un momento, por favor."
                    elif contexto_sesion['tipo_servicio'] == 'psico_coaching_ia':
                        mensaje_final = "Perfecto. Te paso ahora con nuestro coach. Recuerda que tienes 45 minutos de sesi√≥n y tiempo adicional para seguir la conversaci√≥n desde este tel√©fono. Un momento, por favor."
                    else:
                        mensaje_final = "Perfecto. Te paso ahora con nuestro especialista. Un momento, por favor."
                    
                    # Limpiar sesi√≥n temporal
                    sessions.pop(session_id, None)
                    
                    return {
                        "type": "transfer_call",
                        "transfer": {
                            "type": "assistant",
                            "assistantId": especialista
                        },
                        "data_extra": {
                            "codigo_servicio": contexto_sesion['codigo_servicio'],
                            "datos_interpretacion": datos_interpretacion,
                            "session_id": session_id,
                            "numero_telefono": numero_telefono,
                            "sesion_db_id": sesion_id_db if numero_telefono else None
                        },
                        "speak_first": mensaje_final
                    }
                else:
                    return {"type": "speak", "text": "Servicio configurado correctamente. En breve te contactaremos."}
            else:
                # Continuar recopilando datos
                respuesta = responder_ia_contextual(mensaje_usuario, contexto_sesion, numero_telefono)
                return {"type": "speak", "text": respuesta}

        # FLUJO INICIAL: Pedir email primero
        if not contexto_sesion.get('email'):
            contexto_sesion['esperando_email'] = True
            sessions[session_id] = contexto_sesion
            respuesta = responder_ia_contextual(mensaje_usuario, contexto_sesion, numero_telefono)
            return {"type": "speak", "text": respuesta}

        # Fallback
        respuesta = responder_ia_contextual(mensaje_usuario, contexto_sesion, numero_telefono)
        return {"type": "speak", "text": respuesta}
        
    except Exception as e:
        print(f"‚ùå Error en handle_sofia_webhook: {e}")
        import traceback
        traceback.print_exc()
        return {"status": "ok"}  # ‚úÖ CAMBIADO: Evitar loops en errores